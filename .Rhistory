k_row = 10, # Number of groups in rows
k_col = 10 # Number of groups in columns
)
d3heatmap(
heatmap_data_fr18,
Rowv = NA, Colv = NA,
col = viridis::cividis(100),
main = "France 2018",
xlab = "Capital Deciles",
ylab = "hilabour_groups_deciles",
cex.lab = 1.5,
k_row = 10, # Number of groups in rows
k_col = 10 # Number of groups in columns
)
heatmap_data_fr18_sorted <- heatmap_data_fr18[order(rownames(heatmap_data_fr18)), order(colnames(heatmap_data_fr18))]
d3heatmap(
heatmap_data_fr18_sorted,
Rowv = NA, Colv = NA,
col = viridis::cividis(100),
main = "France 2018",
xlab = "Capital Deciles",
ylab = "hilabour_groups_deciles",
cex.lab = 1.5,
k_row = 10, # Number of groups in rows
k_col = 10 # Number of groups in columns
)
sorted_row_names <- rownames(heatmap_data_fr18_sorted)
sorted_col_names <- colnames(heatmap_data_fr18_sorted)
d3heatmap(
heatmap_data_fr18_sorted,
Rowv = NA, Colv = NA,
col = viridis::cividis(100),
main = "France 2018",
xlab = "Capital Deciles",
ylab = "hilabour_groups_deciles",
cex.lab = 1.5,
k_row = 10, # Number of groups in rows
k_col = 10, # Number of groups in columns
labRow = sorted_row_names,
labCol = sorted_col_names
)
d3heatmap(
heatmap_data_fr18_sorted,
Rowv = NA, Colv = NA,
col = viridis::cividis(100),
main = "France 2018",
xlab = "Capital Deciles",
ylab = "hilabour_groups_deciles",
cex.lab = 1.5,
k_row = 10, # Number of groups in rows
k_col = 10, # Number of groups in columns
labRow = sorted_row_names,
labCol = sorted_col_names,
cexRow,
cexCol
)
d3heatmap(
heatmap_data_fr18_sorted,
Rowv = NA, Colv = NA,
col = viridis::cividis(100),
main = "France 2018",
xlab = "Capital Deciles",
ylab = "hilabour_groups_deciles",
cex.lab = 1.5,
k_row = 10, # Number of groups in rows
k_col = 10, # Number of groups in columns
labRow = sorted_row_names,
labCol = sorted_col_names,
Rowv = Rowv)
d3heatmap(
heatmap_data_fr18_sorted,
Rowv = NA, Colv = NA,
col = viridis::cividis(100),
main = "France 2018",
xlab = "Capital Deciles",
ylab = "hilabour_groups_deciles",
cex.lab = 1.5,
k_row = 10, # Number of groups in rows
k_col = 10, # Number of groups in columns
labRow = sorted_row_names,
labCol = sorted_col_names,
cexRow,
cexCol
)
library(gplot)
heatmap.2(
heatmap_data_fr18,
Rowv = NA, Colv = NA,
col = viridis::cividis(100),
main = "France 2018",
xlab = "Capital Deciles",
ylab = "hilabour_groups_deciles",
cex.lab = 1.5,
density.info = "histogram"
)
install.packages("gplots")
library(gplots)
heatmap.2(
heatmap_data_fr18,
Rowv = NA, Colv = NA,
col = viridis::cividis(100),
main = "France 2018",
xlab = "Capital Deciles",
ylab = "Labor Deciles",
cex.lab = 1.5,
density.info = "histogram"
)
heatmap(
heatmap_data_fr70,
Rowv = NA, Colv = NA,
cellnote = heatmap_data_fr70
col = viridis::cividis(100),
heatmap(
heatmap_data_fr70,
Rowv = NA, Colv = NA,
cellnote = heatmap_data_fr70,
col = viridis::cividis(100),
main = "France 1970",
xlab = "Capital Deciles",
ylab = "Labor Deciles",
cex.lab = 1.5
)
heatmap.2(
heatmap_data_fr70,
Rowv = NA, Colv = NA,
cellnote = heatmap_data_fr70,
col = viridis::cividis(100),
main = "France 1970",
xlab = "Capital Deciles",
ylab = "Labor Deciles",
cex.lab = 1.5
)
heatmap.2(
heatmap_data_fr70,
Rowv = NA, Colv = NA,
cellnote = heatmap_data_fr70,
col = viridis::cividis(100),
main = "France 1970",
xlab = "Capital Deciles",
ylab = "Labor Deciles",
cex.lab = 1.5,
density.info = "none"
)
heatmap.2(
matrix18_FR,
Rowv = NA, Colv = NA,
cellnote = matrix18_FR,
col = viridis::cividis(100),
main = "France 1970",
xlab = "Capital Deciles",
ylab = "Labor Deciles",
cex.lab = 1.5,
density.info = "none"
)
heatmap.2(
matrix18_FR,
cellnote = matrix18_FR,
col = viridis::cividis(100),
main = "France 1970",
xlab = "Capital Deciles",
ylab = "Labor Deciles",
cex.lab = 1.5,
density.info = "none"
)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
getwd() # find out where you are
setwd("C:\Users\hamassen\Documents\GitHub\R-Tutorium") # determine where your files are
setwd("C:\\Users\\hamassen\\Documents\\GitHub\\R-Tutorium") # determine where your files are
setwd("C:/Users/hamassen/Documents/GitHub/R-Tutorium")
data <- read.csv("personal_test.csv")
View(data)
View(data)
data <- read.csv("personal_test.csv",  sep = ";", header = FALSE)
View(data)
# load data
data <- read.csv("personal_test.csv",  sep = ";", header = TRUE)
View(data)
data$age
data$Age
glimpse(ID, ID_p)
glimpse(data$ID, data$ID_p)
glimpse(data$ID)
head(data$ID_p)
view(data$Gender)
view(data$Gender)
data$Gender
data <- mutate(data, Gender = ifelse(Gender == "M", 0, 1))
data <- read.csv("personal_test.csv",  sep = ";", header = TRUE)
# attention how data is stored_
# for csv: read.csv("datasetname.csv")
# for xlsx: read.xlsx("datasetname.xlsx")
# for dta: read_dta("datasetname.dta")
# 1) Understand the data you're using!
data$Age # results in list
glimpse(data$ID) # displays first few rows
head(data$ID_p) # very similar as glimpse
data$Gender
# $-operator links the variable you want to look at with the dataset
# Use dplyr
## Recode Gender
data$Gender_binary <- mutate(data, Gender = ifelse(Gender == "M", 0, 1))
data <- mutate(data, Gender = ifelse(Gender == "M", 0, 1))
# Use dplyr
## Recode Gender
data <- mutate(binary, Gender = ifelse(Gender == "M", 0, 1))
data <- read.csv("personal_test.csv",  sep = ";", header = TRUE)
# attention how data is stored_
# for csv: read.csv("datasetname.csv")
# for xlsx: read.xlsx("datasetname.xlsx")
# for dta: read_dta("datasetname.dta")
# 1) Understand the data you're using!
data$Age # results in list
glimpse(data$ID) # displays first few rows
head(data$ID_p) # very similar as glimpse
data$Gender
# $-operator links the variable you want to look at with the dataset
# Use dplyr
## Recode Gender
data <- mutate(binary, Gender = ifelse(Gender == "M", 0, 1))
# Use dplyr
## Recode Gender
data <- mutate(data$Gender_binary, Gender = ifelse(Gender == "M", 0, 1))
# Use dplyr
## Recode Gender
data$Gender_binary
data <- mutate(data, Gender_binary = ifelse(Gender == "M", 0, 1))
data_W <- select(data, Gender == "W")
data_W <- select(data$Gender == "W")
data_W <- select(data$Gender = "W")
data_W <- select(data$Gender = "W")
data_W <- select(data$Gender == "W")
# Filter
data_W <- filter(data, Gender == 1)
data_Gender <- select(data$Gender)
data_Gender <- select(Age)
data_Gender <- select(data$Age)
data_Gender <- data %>%
select(data$Age)
data_Gender <- data %>%
select(Age)
View(data_Gender)
# What is %>%
install.packages("magrittr")
install.packages("magrittr")
library(magrittr)
data_W <- filter(data, Gender == 1) # creates a subset containing only persons with an assigned W
data_W
view(data_W)
view(data_W)
View(data_W)
# Filter data
data_W <- data %>%
filter(Gender == 1) # creates a subset containing only persons with an assigned W
# Filter data
data_W <- data %>%
filter(Gender == 1) # creates a subset containing only persons with an assigned W
View(data_W)
# Filter data
data_W <- data %>%
filter(Gender_binary == 1) # creates a subset containing only persons with an assigned W
View(data_W)
View(data_W)
data_M <- data %>%
filter(Gender_binary == 0)
data_W <- data_W %>%
summarize(Age)
mean_age_W <- summarize(data_W$Age)
# load data such that we can use it
data <- read.csv("personal_test.csv",  sep = ";", header = TRUE)
# attention how data is stored_
# for csv: read.csv("datasetname.csv")
# for xlsx: read.xlsx("datasetname.xlsx")
# for dta: read_dta("datasetname.dta")
# 1) Understand the data you're using!
data$Age # results in list
glimpse(data$ID) # displays first few rows
head(data$ID_p) # very similar as glimpse
data$Gender
# $-operator links the variable you want to look at with the dataset
##############################################################################
# Use dplyr
# Mutate = creates a variable
data <- mutate(data, Gender_binary = ifelse(Gender == "M", 0, 1))
# Breakdown of code:
# 1) data = name of dataset
# 2) Gender_binary = indicates the variable name we want to create
# 3) ifelse = a condition which can be used in creating binary variables (either 0 or 1). This could also be "Age > 18" or whatever you desire
# 4) Gender == "M" = the condition which has to be fulfilled for the if
# 5) 0,1 = if the condition is fulfilled the value is "0", else the value is "1"
# "Place where variable ends"  <- mutate(dataset, new_variable = ifelse(condition, 0, 1))
# Select certain columns
data_Gender <- data %>%
select(Age)
# What is %>%
install.packages("magrittr")
library(magrittr)
# It resembles a pipe and it functions like on
# You can link functions with it, just like a pipe connects two places
# Like in this examples it connects the select command with the information on which dataset this command should be applied to
# Filter data
data_W <- data %>%
filter(Gender_binary == 1) # creates a subset containing only persons with an assigned W
data_M <- data %>%
filter(Gender_binary == 0)
View(data_W)
View(data_M)
# summarize
mean_age_W <- data_W %>%
summarize(mean_age = mean(Age))
install.packages("magrittr")
mean_age_W <- data_W %>%
summarize(mean_age = mean(Age))
tab(mean_age_W)
sum(mean_age_W)
sum(data$Age)
View(mean_age_W)
mean_age_W <- summarize(mean_age = mean(data_W$Age))
mean_age_W <- summarize(mean_age = mean(data_W$Age))
mean_age_W <- dplyr::summarize(mean_age = mean(data_W$Age))
class(data_W)
mean_age_W <- data_W %>%
summarize(mean_age = mean(Age))
print(mean_age_W$mean_age)
mean_age_M <- data_M %>%
summarize(mean_age = mean(Age))
print(mean_age_M$mean_age)
mean_age_M <- summarize(mean_age = mean(data_M$Age))
# pa
mean_age_M <- mean(data_M$Age)
mean_age_M
mean_age_M <- mean(data_M$Age)
mean_age_W
mean_age_M
mean_age_W <- round(mean_age_W, digits = 2)
mean_age_W
mean_age_W <- round(mean_age_W, digits = -1)
mean_age_W
mean_age_M <- round(mean_age_M, digits = -1)
mean_age_M <- round(mean_age_M, digits = -1)
mean_age_M
mean_age_W
data_W <- df[colnames(Gender) %in% c('ID_p', 'W')]
data_W <- data[colnames(Gender) %in% c('ID_p', 'W')]
data_W <- data[colnames(ID) %in% c('ID_p', 'W')]
data_W <- data[colnames(Gender) %in% c( 'W')]
data_W <- data[colnames(Gender) %in% c( 'W')]
# load data
data <- read.csv("personal_test.csv")
view(data) # opens tab showing data
# load data
data <- read.csv("personal_test.csv")
View(data) # opens tab showing data
# load data such that we can use it
data <- read.csv("personal_test.csv",  sep = ";", header = TRUE)
# attention how data is stored_
# for csv: read.csv("datasetname.csv")
# for xlsx: read.xlsx("datasetname.xlsx")
# for dta: read_dta("datasetname.dta")
# 1) Understand the data you're using!
data$Age # results in list
glimpse(data$ID) # displays first few rows
head(data$ID_p) # very similar as glimpse
data$Gender
# $-operator links the variable you want to look at with the dataset
##############################################################################
# Use dplyr
# Mutate = creates a variable
data <- mutate(data, Gender_binary = ifelse(Gender == "M", 0, 1))
# Breakdown of code:
# 1) data = name of dataset
# 2) Gender_binary = indicates the variable name we want to create
# 3) ifelse = a condition which can be used in creating binary variables (either 0 or 1). This could also be "Age > 18" or whatever you desire
# 4) Gender == "M" = the condition which has to be fulfilled for the if
# 5) 0,1 = if the condition is fulfilled the value is "0", else the value is "1"
# "Place where variable ends"  <- mutate(dataset, new_variable = ifelse(condition, 0, 1))
# Select certain columns
data_Gender <- data %>%
select(Age)
# What is %>%
library(magrittr)
# It resembles a pipe and it functions like on
# You can link functions with it, just like a pipe connects two places
# Like in this examples it connects the select command with the information on which dataset this command should be applied to
# Filter data
data_W <- data %>%
filter(Gender_binary == 1) # creates a subset containing only persons with an assigned W
data_M <- data %>%
filter(Gender_binary == 0)
View(data_W)
View(data_M)
# summarize
mean_age_W <- data_W %>%
summarize(mean_age = mean(Age))
mean_age_M <- data_M %>%
summarize(mean_age = mean(data_M$Age))
print(mean_age_W$mean_age)
print(mean_age_M$mean_age)
##############################################################################
# Packages are not always the better option!
# Remember: Don't make easy things hard :)
mean_age_W <- mean(data_W$Age)
mean_age_M <- mean(data_M$Age)
mean_age_W
mean_age_M
rm(data_Gender)
all(table(data$ID) == 1)
all(table(data$ID_p) == 1
all(table(data$ID_p) == 1)
all(table(data$ID_p) == 1)
View(data)
Age
# get standard deviation
mean_age_M <- data_M %>%
summarize(mean_age = sd(Age))
sd_age_M
sd_age_M <- data_M %>%
summarize(mean_age = sd(Age))
sd_age_M
# get standard deviation
sd_age_W <- data_W %>%
summarize(mean_age = sd(Age))
mean_age_W <- data_W %>%
summarize(mean_age = mean(Age))
mean_age_M <- data_M %>%
summarize(mean_age = mean(Age))
# get standard deviation
sd_age_W <- data_W %>%
summarize(mean_age = sd(Age))
sd_age_M <- data_M %>%
summarize(mean_age = sd(Age))
sd_age_W <- sd(data_W$Age)
sd_age_M <- sd(data_M$Age)
data <- data %>%
group_by(Gender) %>%
summarise(mean = mean(Age))
View(data)
# load data
data <- read.csv("personal_test.csv")
View(data) # opens tab showing data
# load data such that we can use it
data <- read.csv("personal_test.csv",  sep = ";", header = TRUE)
# attention how data is stored_
# for csv: read.csv("datasetname.csv")
# for xlsx: read.xlsx("datasetname.xlsx")
# for dta: read_dta("datasetname.dta")
# 1) Understand the data you're using!
data$Age # results in list
glimpse(data$ID) # displays first few rows
head(data$ID_p) # very similar as glimpse
data$Gender
# $-operator links the variable you want to look at with the dataset
##############################################################################
# Use dplyr
# Mutate = creates a variable
data <- mutate(data, Gender_binary = ifelse(Gender == "M", 0, 1))
# Breakdown of code:
# 1) data = name of dataset
# 2) Gender_binary = indicates the variable name we want to create
# 3) ifelse = a condition which can be used in creating binary variables (either 0 or 1). This could also be "Age > 18" or whatever you desire
# 4) Gender == "M" = the condition which has to be fulfilled for the if
# 5) 0,1 = if the condition is fulfilled the value is "0", else the value is "1"
# "Place where variable ends"  <- mutate(dataset, new_variable = ifelse(condition, 0, 1))
# Select certain columns
data_Gender <- data %>%
select(Age)
# What is %>%
library(magrittr)
# It resembles a pipe and it functions like on
# You can link functions with it, just like a pipe connects two places
# Like in this examples it connects the select command with the information on which dataset this command should be applied to
# Filter data
data_W <- data %>%
filter(Gender_binary == 1) # creates a subset containing only persons with an assigned W
data_M <- data %>%
filter(Gender_binary == 0)
View(data_W)
View(data_M)
# summarize
# get the mean using the mean function
mean_age_W <- data_W %>%
summarize(mean_age = mean(Age))
mean_age_M <- data_M %>%
summarize(mean_age = mean(Age))
# get standard deviation
sd_age_W <- data_W %>%
summarize(mean_age = sd(Age))
sd_age_M <- data_M %>%
summarize(mean_age = sd(Age))
print(mean_age_W$mean_age)
print(mean_age_M$mean_age)
##############################################################################
# Packages are not always the better option!
# Remember: Don't make easy things hard :)
mean_age_W <- mean(data_W$Age)
mean_age_M <- mean(data_M$Age)
mean_age_W
mean_age_M
sd_age_W <- sd(data_W$Age)
sd_age_M <- sd(data_M$Age)
# there are no wrong ways, but more and less efficient ways
data$mean <- data %>%
group_by(Gender) %>%
summarise(mean = mean(Age))
data$mean <- data %>%
group_by(Gender) %>%
summarise(data$mean = mean(Age))
mean <- data %>%
group_by(Gender) %>%
summarise(mean = mean(Age))
